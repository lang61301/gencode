/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.paddingdun.gen.code.gui.view.dbtable;

import java.awt.EventQueue;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.StringReader;
import java.util.Formatter;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.Callable;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.apache.log4j.Logger;

import me.paddingdun.gen.code.data.message.Message;
import me.paddingdun.gen.code.data.table.TableColumn;
import me.paddingdun.gen.code.data.tabletree.Table;
import me.paddingdun.gen.code.db.TableHelper;
import me.paddingdun.gen.code.gui.perspective.designer.DesignerPerspective;
import me.paddingdun.gen.code.gui.view.AbstractView;
import me.paddingdun.gen.code.util.TaskHelper;
import me.paddingdun.gen.code.util.VelocityHelper;
import net.barenca.jastyle.ASFormatter;
import net.barenca.jastyle.FormatterHelper;

/**
 *
 * @author admin
 */
public class TableView extends AbstractView {
	
	/**
	 * TableView 日志变量;
	 */
	private final static Logger logger = Logger.getLogger(TableView.class);


	private DesignerPerspective perspective;
	
	/**
	 * 数据;
	 */
	private TableViewModel model = null;
	
    /**
     * Creates new form TableFrame
     */
    public TableView(DesignerPerspective perspective) {
    	super();
    	this.perspective = perspective;
        initComponents();
        
        init();
    }
    
    @Override
    public void init(){
    	super.init();
    	
    	model = new TableViewModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("数据库表详细内容");
        fileChooser = new javax.swing.JFileChooser();
        bg1 = new javax.swing.ButtonGroup();
        spp = new javax.swing.JSplitPane();
        sp = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        sp2 = new javax.swing.JScrollPane();
        pane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPgName = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        btnGen = new javax.swing.JButton();
        
        spp.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        sp.setViewportView(table);

        spp.setLeftComponent(sp);

        sp2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jLabel1.setText("包名称");

        bg1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("属性名称");

        bg1.add(jRadioButton2);
        jRadioButton2.setText("表字段名称");

        jLabel2.setText("SQL传入值占位符");

        btnGen.setText("生成");
        btnGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneLayout = new javax.swing.GroupLayout(pane);
        pane.setLayout(paneLayout);
        paneLayout.setHorizontalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(16, 16, 16)
                .addGroup(paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneLayout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton2))
                    .addGroup(paneLayout.createSequentialGroup()
                        .addComponent(txtPgName, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGen)))
                .addContainerGap(185, Short.MAX_VALUE))
        );
        paneLayout.setVerticalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jLabel2))
                .addContainerGap(338, Short.MAX_VALUE))
        );

        paneLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2});

        sp2.setViewportView(pane);

        spp.setBottomComponent(sp2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
        );
        

        
        
        
        
        this.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                afterShow(evt);
            }
        });
        
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void afterShow(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_afterShow
    	table.addMouseListener(new MouseAdapter() {
    	    @Override
    	    public void mouseClicked(MouseEvent e){
    	    	System.out.println(table.getSelectedRow());
    	    }
    	});
    	
    	spp.setDividerLocation(0.5);
    }
    
    private void btnGenActionPerformed(java.awt.event.ActionEvent evt) {
    	if(model.getTable() != null){
	    	fileChooser.setFileSelectionMode(JFileChooser.SAVE_DIALOG|JFileChooser.DIRECTORIES_ONLY);
	        int opt = fileChooser.showSaveDialog(null);
	        //保存;
	        if(JFileChooser.APPROVE_OPTION == opt){
	        	TaskHelper.runInNonEDT(new Callable<Integer[]>() {
					public Integer[] call() throws Exception {
						File saveFile = fileChooser.getSelectedFile();
			        	if(!saveFile.exists())
			        		saveFile.mkdirs();
			        	ASFormatter formatter = new ASFormatter();
			        	formatter.setJavaStyle();
			        	System.out.println(FormatterHelper.format(new StringReader(VelocityHelper.entityBean(model)), formatter));
			        	
			        	System.out.println(VelocityHelper.sqlMap(model));
			        	
			        	
			        	System.out.println(VelocityHelper.dataTable(model));
			        	
			        	EventQueue.invokeLater(new Runnable() {
							public void run() {
								JOptionPane.showMessageDialog(null, "生成文件完成!");
							}
						});
						return null;
					}
				});
	        }
    	}
    }   


    // Variables declaration - do not modify//GEN-BEGIN:variables
    
    private javax.swing.ButtonGroup bg1;
    private javax.swing.JButton btnGen;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JPanel pane;
    private javax.swing.JScrollPane sp;
    private javax.swing.JScrollPane sp2;
    private javax.swing.JSplitPane spp;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtPgName;
    
    // End of variables declaration//GEN-END:variables

	/* (non-Javadoc)
	 * @see me.paddingdun.gen.code.gui.view.AbstractView#doMessage(me.paddingdun.gen.code.data.message.Message)
	 */
	@Override
	public void doMessage(Message message) {
		//表格树点击消息;
		if(DesignerPerspective.MESSAGE_CLICK_TABLE_TREE_NODE.equals(message.getName())){
			final Table t = (Table)message.getObject();
			
			TaskHelper.runInNonEDT(new Callable<Integer[]>() {
				public Integer[] call() throws Exception {
					
					List<TableColumn> list_tr = TableHelper.tableColumn(t.getCat(), t.getTableName());
					t.setColumns(list_tr);
					
					model.setTable(t);
					
					Vector<Vector<Object>> v = TableHelper.transform1(list_tr);
					Vector<Object> v2 = new Vector<Object>();
//								DefaultTableColumnModel dtcm = new DefaultTableColumnModel();
			    	String[] heads = new String[]{"主键", "列名称", "列类型", "列描述"};
//			    	v2.add("select");
			    	for (int i = 0; i < heads.length; i++) {
//						    		TableColumn h = new TableColumn(i);
//						        	h.setHeaderValue(heads[i]);
//						        	dtcm.addColumn(h);
			        	v2.add(heads[i]);
					}
//						    	table.setColumnModel(dtcm);
					final DefaultTableModel dtm = new DefaultTableModel(v, v2){
						private static final long serialVersionUID = 1L;

						public Class<?> getColumnClass(int col){
							Object value = getValueAt(0, col);
					        if(value!=null)
					            return value.getClass();
					        else 
					        	return super.getClass();
						}
					};
					
					EventQueue.invokeLater(new Runnable() {
						public void run() {
							table.setModel(dtm);
					    	table.updateUI();
						}
					});
					return new Integer[]{0};
				}
			});
		}
	}
}
