/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.paddingdun.gen.code.gui.view.dbtable;

import java.awt.EventQueue;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.StringReader;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.FileHandler;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.apache.log4j.Logger;

import layout.TableLayout;
import me.paddingdun.gen.code.data.message.Message;
import me.paddingdun.gen.code.data.option.ModelValue;
import me.paddingdun.gen.code.data.option.Option;
import me.paddingdun.gen.code.data.table.TableColumn;
import me.paddingdun.gen.code.data.tabletree.Table;
import me.paddingdun.gen.code.db.TableHelper;
import me.paddingdun.gen.code.gui.perspective.designer.DesignerPerspective;
import me.paddingdun.gen.code.gui.view.AbstractView;
import me.paddingdun.gen.code.util.CollectionHelper;
import me.paddingdun.gen.code.util.FileHelper;
import me.paddingdun.gen.code.util.ModelHelper;
import me.paddingdun.gen.code.util.TaskHelper;
import me.paddingdun.gen.code.util.VelocityHelper;
import net.barenca.jastyle.ASFormatter;
import net.barenca.jastyle.FormatterHelper;

/**
 *
 * @author admin
 */
public class TableView extends AbstractView {
	
	/**
	 * TableView 日志变量;
	 */
	private final static Logger logger = Logger.getLogger(TableView.class);


	private DesignerPerspective perspective;
	
	/**
	 * 数据;
	 */
	private TableViewModel model = null;
	
    /**
     * Creates new form TableFrame
     */
    public TableView(DesignerPerspective perspective) {
    	super();
    	this.perspective = perspective;
        initComponents();
        
        init();
    }
    
    @Override
    public void init(){
    	super.init();
    	
    	model = new TableViewModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("数据库表详细内容");
        fileChooser = new javax.swing.JFileChooser();
        spp = new javax.swing.JSplitPane();
        sp = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        sp2 = new javax.swing.JScrollPane();
        pane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pkgName = new javax.swing.JTextField();
        btnGen = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jcombo_sqlMapMarkUse = new javax.swing.JComboBox<Option<Integer>>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jcombo_showGsonAnnotation = new javax.swing.JComboBox<Option<Boolean>>();
        saveMethodPrefix = new javax.swing.JTextField();
        updateMethodPrefix = new javax.swing.JTextField();
        getMethodPrefix = new javax.swing.JTextField();
        deleteMethodPrefix = new javax.swing.JTextField();
        queryMethodPrefix = new javax.swing.JTextField();
        queryPagingMethodPrefix = new javax.swing.JTextField();
        
        spp.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        sp.setViewportView(table);

        spp.setLeftComponent(sp);

        sp2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jLabel1.setText("包名称");

        btnGen.setText("生成");

        jLabel2.setText("SQL传入值占位符");

//        sqlMapMarkUse.setModel(null);

        jLabel3.setText("保存方法前缀");

        jLabel4.setText("更新方法前缀");

        jLabel5.setText("获取方法前缀");

        jLabel6.setText("删除方法前缀");

        jLabel7.setText("列表方法前缀");

        jLabel8.setText("分页方法前缀");

        jLabel9.setText("是否显示gosn注释");

//        showGsonAnnotation.setModel(null);

        btnGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenActionPerformed(evt);
            }
        });
        
        TableLayout tableLayout = new TableLayout();
        double border = 2;			      //0      1    2     3    4     5     6
        tableLayout.setColumn(new double[]{border, 50,  50,   80,  -1,  50,   70, border});
        tableLayout.setRow(new double[]{border,30, 30, 30, 30, 30, 30, 30, 30, 30, border});
        pane.setLayout(tableLayout);
        
        pane.add(jLabel1, "1,1,2,1");
        pane.add(pkgName, "3,1,5,1");
        pane.add(btnGen, "6,1");
        
        pane.add(jLabel2, "1,2,2,2");
        pane.add(jcombo_sqlMapMarkUse, "3,2,4,2");
        
        pane.add(jLabel9, "1,3,2,3");
        pane.add(jcombo_showGsonAnnotation, "3,3,4,3");
        
        pane.add(jLabel3, "1,4,2,4");
        pane.add(saveMethodPrefix, "3,4,4,4");
        
        pane.add(jLabel4, "1,5,2,5");
        pane.add(updateMethodPrefix, "3,5,4,5");
        
        pane.add(jLabel5, "1,6,2,6");
        pane.add(getMethodPrefix, "3,6,4,6");
        
        pane.add(jLabel6, "1,7,2,7");
        pane.add(deleteMethodPrefix, "3,7,4,7");
        
        pane.add(jLabel7, "1,8,2,8");
        pane.add(queryMethodPrefix, "3,8,4,8");
        
        pane.add(jLabel8, "1,9,2,9");
        pane.add(queryPagingMethodPrefix, "3,9,4,9");
        
        
        sqlMapMarkUse.addElement(CollectionHelper.option("属性名称", 1));
        sqlMapMarkUse.addElement(CollectionHelper.option("表字段名称", 2));
       jcombo_sqlMapMarkUse.setModel(sqlMapMarkUse);
       
       showGsonAnnotation.addElement(CollectionHelper.option("是", Boolean.TRUE));
       showGsonAnnotation.addElement(CollectionHelper.option("否", Boolean.FALSE));
       jcombo_showGsonAnnotation.setModel(showGsonAnnotation);
       
       
        
        sp2.setViewportView(pane);

        spp.setBottomComponent(sp2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
        );
        

        
        
        
        
        this.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                afterShow(evt);
            }
        });
        
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void afterShow(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_afterShow
    	table.addMouseListener(new MouseAdapter() {
    	    @Override
    	    public void mouseClicked(MouseEvent e){
    	    	System.out.println(table.getSelectedRow());
    	    }
    	});
    	
    	spp.setDividerLocation(0.5);
    	
    	ModelHelper.simpleGetAndComplexSet(model, TableView.this);
    }
    
    private void btnGenActionPerformed(java.awt.event.ActionEvent evt) {
    	if(model.getTable() != null){
	    	fileChooser.setFileSelectionMode(JFileChooser.SAVE_DIALOG|JFileChooser.DIRECTORIES_ONLY);
	        int opt = fileChooser.showSaveDialog(null);
	        //保存;
	        if(JFileChooser.APPROVE_OPTION == opt){
	        	TaskHelper.runInNonEDT(new Callable<Integer[]>() {
					public Integer[] call() throws Exception {
						File saveFile = fileChooser.getSelectedFile();
			        	if(!saveFile.exists())
			        		saveFile.mkdirs();
			        	//设置值;
			        	ModelHelper.complexGetAndSimpleSet(TableView.this, model);
			        	
			        	ASFormatter formatter = new ASFormatter();
			        	formatter.setJavaStyle();
			        	
			        	String javaContent = FormatterHelper.format(new StringReader(VelocityHelper.entityBean(model)), formatter);
			        	System.out.println(javaContent);
			        	FileHelper.genJavaFile(saveFile.getAbsolutePath(), model.getPkgName(), model.getTable().getEntityBeanName(), javaContent);
			        	
			        	String sqlMapContent = VelocityHelper.sqlMap(model);
			        	FileHelper.genSqlMapXmlFile(saveFile.getAbsolutePath(), model.getTable().getEntityBeanName(), sqlMapContent);
			        	System.out.println(sqlMapContent);
			        	
			        	
			        	System.out.println(VelocityHelper.dataTable(model));
			        	
			        	EventQueue.invokeLater(new Runnable() {
							public void run() {
								JOptionPane.showMessageDialog(null, "生成文件完成!");
							}
						});
						return null;
					}
				});
	        }
    	}
    }   


    // Variables declaration - do not modify//GEN-BEGIN:variables
    
    private javax.swing.JButton btnGen;
    
    @ModelValue(valueGetFuncName = "getText", valueSetFuncName ="setText")
    private javax.swing.JTextField deleteMethodPrefix;
    private javax.swing.JFileChooser fileChooser;
    
    @ModelValue(valueGetFuncName = "getText", valueSetFuncName ="setText")
    private javax.swing.JTextField getMethodPrefix;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel pane;
    @ModelValue(valueGetFuncName = "getText", valueSetFuncName ="setText")
    private javax.swing.JTextField pkgName;
    @ModelValue(valueGetFuncName = "getText", valueSetFuncName ="setText")
    private javax.swing.JTextField queryMethodPrefix;
    @ModelValue(valueGetFuncName = "getText", valueSetFuncName ="setText")
    private javax.swing.JTextField queryPagingMethodPrefix;
    @ModelValue(valueGetFuncName = "getText", valueSetFuncName ="setText")
    private javax.swing.JTextField saveMethodPrefix;
    private javax.swing.JComboBox<Option<Boolean>> jcombo_showGsonAnnotation;
    private javax.swing.JScrollPane sp;
    private javax.swing.JScrollPane sp2;
    private javax.swing.JSplitPane spp;
    private javax.swing.JComboBox<Option<Integer>> jcombo_sqlMapMarkUse;
    private javax.swing.JTable table;
    @ModelValue(valueGetFuncName = "getText", valueSetFuncName ="setText")
    private javax.swing.JTextField updateMethodPrefix;
    
    @ModelValue()
    private OptionComboBoxModel<Integer> sqlMapMarkUse = new OptionComboBoxModel<Integer>();
    @ModelValue()
    private OptionComboBoxModel<Boolean> showGsonAnnotation = new OptionComboBoxModel<Boolean>();
    
    
    
    // End of variables declaration//GEN-END:variables

	/* (non-Javadoc)
	 * @see me.paddingdun.gen.code.gui.view.AbstractView#doMessage(me.paddingdun.gen.code.data.message.Message)
	 */
	@Override
	public void doMessage(Message message) {
		//表格树点击消息;
		if(DesignerPerspective.MESSAGE_CLICK_TABLE_TREE_NODE.equals(message.getName())){
			final Table t = (Table)message.getObject();
			
			TaskHelper.runInNonEDT(new Callable<Integer[]>() {
				public Integer[] call() throws Exception {
					
					List<TableColumn> list_tr = TableHelper.tableColumn(t.getCat(), t.getTableName());
					t.setColumns(list_tr);
					
					model.setTable(t);
					
					Vector<Vector<Object>> v = TableHelper.transform1(list_tr);
					Vector<Object> v2 = new Vector<Object>();
//								DefaultTableColumnModel dtcm = new DefaultTableColumnModel();
			    	String[] heads = new String[]{"主键", "自增长", "列名称", "列类型", "列描述"};
//			    	v2.add("select");
			    	for (int i = 0; i < heads.length; i++) {
//						    		TableColumn h = new TableColumn(i);
//						        	h.setHeaderValue(heads[i]);
//						        	dtcm.addColumn(h);
			        	v2.add(heads[i]);
					}
//						    	table.setColumnModel(dtcm);
					final DefaultTableModel dtm = new DefaultTableModel(v, v2){
						private static final long serialVersionUID = 1L;

						public Class<?> getColumnClass(int col){
							Object value = getValueAt(0, col);
					        if(value!=null)
					            return value.getClass();
					        else 
					        	return super.getClass();
						}
					};
					
					EventQueue.invokeLater(new Runnable() {
						public void run() {
							table.setModel(dtm);
					    	table.updateUI();
						}
					});
					return new Integer[]{0};
				}
			});
		}
	}
}
