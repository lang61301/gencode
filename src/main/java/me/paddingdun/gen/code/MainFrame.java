/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.paddingdun.gen.code;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Vector;

import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import me.paddingdun.gen.code.data.tabletree.Table;
import me.paddingdun.gen.code.db.TableHelper;

/**
 *
 * @author admin
 */
public class MainFrame extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        initData();
    }
    
    public void initData(){
    	DefaultTreeModel tm = new DefaultTreeModel(TableHelper.TableTreeNode());
        tableTree.addTreeSelectionListener(new TreeSelectionListener() {
			
			public void valueChanged(TreeSelectionEvent e) {
				Object[] objs = e.getPath().getPath();
				DefaultMutableTreeNode node = (DefaultMutableTreeNode)objs[objs.length - 1];
				if(node.isLeaf()){
					Object uo = node.getUserObject();
					if( uo instanceof Table){
						Table t = (Table)uo;
						System.out.println("click:" + t);
						Vector<Vector<Object>> v = TableHelper.tableRecord(t.getCat(), t.getTableName());
						Vector<Object> v2 = new Vector<Object>();
	//					DefaultTableColumnModel dtcm = new DefaultTableColumnModel();
				    	String[] heads = new String[]{"列名称", "列类型", "列描述"};
				    	v2.add("select");
				    	for (int i = 0; i < heads.length; i++) {
	//			    		TableColumn h = new TableColumn(i);
	//			        	h.setHeaderValue(heads[i]);
	//			        	dtcm.addColumn(h);
				        	v2.add(heads[i]);
						}
	//			    	table.setColumnModel(dtcm);
						DefaultTableModel dtm = new DefaultTableModel(v, v2){
							/**
							 * 
							 */
							private static final long serialVersionUID = 1L;
	
							public Class<?> getColumnClass(int col){
								Object value = getValueAt(0, col);
						        if(value!=null)
						            return value.getClass();
						        else 
						        	return super.getClass();
							}
						};
				    	table.setModel(dtm);
				    	
				    	table.addMouseListener(new MouseAdapter() {
				    	    @Override
				    	    public void mouseClicked(MouseEvent e){
//				    	    	int x = e.getX();
//				    	    	int y = e.getY();
//				    	    	Component c =  table.getComponentAt(x, y);
				    	    	System.out.println(table.getSelectedRow());
//				    	        if(table.getColumnModel().getColumnIndexAtX(e.getX())==0){//如果点击的是第0列，即checkbox这一列
//				    	            JCheckBox Checkbox = (JCheckBox)check;
//				    	            boolean b = !check.isSelected();
//				    	            check.setSelected(b);
//				    	            table.getTableHeader().repaint();
//				    	            for(int i=0;i<table.getRowCount();i++){
//				    	                table.getModel().setValueAt(b, i, 0);//把这一列都设成和表头一样
//				    	            }
//				    	        }
				    	    }
				    	});
				    	
				    	final MyCheckBoxRenderer check = new MyCheckBoxRenderer();
						table.getColumn("select").setHeaderRenderer(check);
				    	table.updateUI();
					}
				}
			}
		});
    	tableTree.setModel(tm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        main = new javax.swing.JSplitPane();
        left = new javax.swing.JSplitPane();
        tableListPanel = new javax.swing.JScrollPane();
        tableTree = new javax.swing.JTree();
        right = new javax.swing.JSplitPane();
        middle = new javax.swing.JSplitPane();
        tablePanel = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(6);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                afterShow(evt);
            }
        });

        toolBar.setRollover(true);

        left.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        tableListPanel.setViewportView(tableTree);

        left.setBottomComponent(tableListPanel);

        main.setLeftComponent(left);

        middle.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        right.setLeftComponent(middle);

        tablePanel.setViewportView(table);

        right.setRightComponent(tablePanel);

        main.setRightComponent(right);

        fileMenu.setText("File");
        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void afterShow(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_afterShow
        right.setDividerLocation(0.6);
        main.setDividerLocation(0.2);
        left.setDividerLocation(0.5);
        middle.setDividerLocation(0.5);
       
    }//GEN-LAST:event_afterShow

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSplitPane left;
    private javax.swing.JSplitPane main;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JSplitPane middle;
    private javax.swing.JSplitPane right;
    private javax.swing.JTable table;
    private javax.swing.JScrollPane tableListPanel;
    private javax.swing.JScrollPane tablePanel;
    private javax.swing.JTree tableTree;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}


class MyCheckBoxRenderer extends JCheckBox implements TableCellRenderer{
	 
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public MyCheckBoxRenderer () {
        this.setBorderPainted(true);
    }
    
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        return this;
    }   
}